x<- str_replace_all(x, "[|]{2}" , "|0|")
str_replace_all(x, "[|]{2}" , "|0|")
})
firstlines
names <- c()
points <- c()
averagePoints <- c()
for (row in unlist(firstlines)) {
ar<- unlist(str_split(row, fixed("|")))
print(row)
print("----")
names <- c(names, ar[1])
points <- c(points, ar[2])
averagePoints <- c(averagePoints, mean(as.integer(ar[3]),as.integer(ar[4]),as.integer(ar[5]),as.integer(ar[6]),as.integer(ar[7]),as.integer(ar[8]),as.integer(ar[9])))
}
names
points
averagePoints
firstlines <- lapply(lines1, function (x){
x <- str_replace_all(x, "[|][A-Z]\\s{1,}", "|")
x <- str_replace_all(x, "\\s{2,}" , "")
str_replace_all(x, "[|]{2}" , "|0|")
})
firstlines
firstlines <- lapply(lines1, function (x){
x <- str_replace_all(x, "[|][A-Z]\\s{1,}", "|")
x <- str_replace_all(x, "\\s{2,}" , "")
x<- str_replace_all(x, "[|]{2}" , "|0|")
str_replace_all(x, "[|]{2}" , "|0|")
})
firstlines
names <- c()
points <- c()
averagePoints <- c()
for (row in unlist(firstlines)) {
ar<- unlist(str_split(row, fixed("|")))
print(row)
print("----")
names <- c(names, ar[1])
points <- c(points, ar[2])
averagePoints <- c(averagePoints, mean(as.integer(ar[3]),as.integer(ar[4]),as.integer(ar[5]),as.integer(ar[6]),as.integer(ar[7]),as.integer(ar[8]),as.integer(ar[9])))
}
names
points
averagePoints
players.data <- data.frame(names=names,points=points, averagePoints=averagePoints )
head(players.data)
head(players.data)
players.data
View(players.data)
View(players.data)
view(players.data)
lines2 <- str_extract_all(mystring, ".+[A-Z]{2}\\s{1}[|]")
lines2
unlist(str_replace_all(lines1, "[|][A-Z]\\s{1,}", "|"))
lines2 <- str_extract_all(mystring, ".+[A-Z]{2}\\s{1}[|]")
lines2
statesData <- str_extract_all(mystring, ".+[A-Z]{2}\\s{1}[|]")
lines2
states = c()
for (state in unlist(statesData)) {
state <- str_replace_all(state, "\\s+" , "")
states <- c(states, state)
}
states
statesData <- str_extract_all(mystring, ".+[A-Z]{2}\\s{1}[|]")
lines2
states = c()
for (state in unlist(statesData)) {
state <- str_replace_all(state, "\\s+" , "")
state <- str_replace_all(state, "[|]" , "")
states <- c(states, state)
}
states
line3 <- str_extract_all(mystring, "\\d+\\s+->\\d+")
line3
line4 <- str_replace_all(line3, "\\s+->" , "|")
line4
line3
line3 <- str_extract_all(mystring, "[:alnum:]+\\s+->[:alnum:]+")
line3
preRating = c()
prepostData <- str_extract_all(mystring, "[:alnum:]+\\s+->[:alnum:]+")
for (prepost in unlist(prepostData)) {
prepost <- str_replace_all(prepost, "\\s?->" , "|")
ar<- unlist(str_split(prepost, fixed("|")))
preRating <- c(preRating,ar[1])
}
preRating
players.data <- data.frame(names=names,points=points, averagePoints=averagePoints, state=states ,preRating=preRating  )
states
length(states)
length(preRating)
length(averagePoints)
length(points)
prepostData <- str_extract_all(mystring, "[:alnum:]+\\s+->[:alnum:]+")
prepostData
prepostData <- str_extract_all(mystring, "[:alnum:]+\\s?->[:alnum:]+")
prepostData
prepostData <- str_extract_all(mystring, "[:alnum:]+.?->[:alnum:]+")
prepostData
prepostData <- str_extract_all(mystring, "[:alnum:]+.?->[:alnum:]+")
prepostData
prepostData <- str_extract_all(mystring, "[[0-9][A-Z]+.?->[:alnum:]+")
prepostData <- str_extract_all(mystring, "[0-9]+.?->[:alnum:]+")
prepostData
prepostData <- str_extract_all(mystring, "[:alnum:]+.?->[:alnum:]+")
prepostData
prepostData <- str_extract_all(mystring, "[:alnum:]+\\s+->[:alnum:]+")
prepostData
prepostData <- str_extract_all(mystring, "[:alnum:]+\\s?->[:alnum:]+")
prepostData
prepostData <- str_extract_all(mystring, "[:alnum:]+\\s*->[:alnum:]+")
prepostData
prepostData <- str_extract_all(mystring, "[:alnum:]+\\s*->\\s?[:alnum:]+")
prepostData
length(points)
prepostData
for (prepost in unlist(prepostData)) {
prepost <- str_replace_all(prepost, "\\s?->" , "|")
ar<- unlist(str_split(prepost, fixed("|")))
preRating <- c(preRating,ar[1])
}
length(preRating)
preRating = c()
prepostData <- str_extract_all(mystring, "[:alnum:]+\\s*->\\s?[:alnum:]+")
prepostData
for (prepost in unlist(prepostData)) {
prepost <- str_replace_all(prepost, "\\s?->" , "|")
ar<- unlist(str_split(prepost, fixed("|")))
preRating <- c(preRating,ar[1])
}
length(preRating)
prepostData <- str_extract_all(mystring, "[0-9,A-Z]+\\s*->\\s?[:alnum:]+")
prepostData
prepostData <- str_extract_all(mystring, "[0-9,A-Z]+\\s*->\\s?[0-9,A-Z]+")
prepostData
for (prepost in unlist(prepostData)) {
prepost <- str_replace_all(prepost, "\\s?->" , "|")
ar<- unlist(str_split(prepost, fixed("|")))
preRating <- c(preRating,ar[1])
}
length(preRating)
length(points)
preRating = c()
prepostData <- str_extract_all(mystring, "[0-9,A-Z]+\\s*->\\s?[0-9,A-Z]+")
prepostData
for (prepost in unlist(prepostData)) {
prepost <- str_replace_all(prepost, "\\s?->" , "|")
ar<- unlist(str_split(prepost, fixed("|")))
preRating <- c(preRating,ar[1])
}
preRating
length(preRating)
length(points)
length(states)
lines1
lines1 <- str_extract_all(mystring, "[[:alpha:]]+ [[:alpha:]]+\\s+[|]\\d+[.]\\d.+\\|")
lines1
lines1 <- str_extract_all(mystring, "([[:alpha:]]+){1,}\\s+[|]\\d+[.]\\d.+\\|")
lines1
lines1 <- str_extract_all(mystring, "[[[:alpha:]]+]{1,}\\s+[|]\\d+[.]\\d.+\\|")
lines1
lines1 <- str_extract_all(mystring, "\\w{1,}\\s+[|]\\d+[.]\\d.+\\|")
lines1
lines1 <- str_extract_all(mystring, "\\w+\\s+[|]\\d+[.]\\d.+\\|")
lines1
lines1 <- str_extract_all(mystring, "\\w\\s+\\s+[|]\\d+[.]\\d.+\\|")
lines1
lines1 <- str_extract_all(mystring, "\\w+\\s+[|]\\d+[.]\\d.+\\|")
lines1
lines1 <- str_extract_all(mystring, "\\w+\\w+\\s+[|]\\d+[.]\\d.+\\|")
lines1
lines1 <- str_extract_all(mystring, "[[:alpha:]]+ [[:alpha:]]? [[:alpha:]]+\\s+[|]\\d+[.]\\d.+\\|")
lines1
lines1 <- str_extract_all(mystring, "[[:alpha:]]+ [[:alpha:]]+? [[:alpha:]]+\\s+[|]\\d+[.]\\d.+\\|")
lines1
lines1 <- str_extract_all(mystring, "(\\w )+\\s+[|]\\d+[.]\\d.+\\|")
lines1
lines1 <- str_extract_all(mystring, "(\\W )+\\s+[|]\\d+[.]\\d.+\\|")
lines1
lines1 <- str_extract_all(mystring, "([[:alpha:]]+)+\\s+[|]\\d+[.]\\d.+\\|")
lines1
lines1 <- str_extract_all(mystring, "([[[:alpha:]]+\\s]+\\s+[|]\\d+[.]\\d.+\\|")
lines1 <- str_extract_all(mystring, "[[:alpha:]]+\\s+[|]\\d+[.]\\d.+\\|")
lines1
lines1 <- str_extract_all(mystring, "\\w+\\s+[|]\\d+[.]\\d.+\\|")
lines1
lines1 <- str_extract_all(mystring, "\\w+{1,}\\s+[|]\\d+[.]\\d.+\\|")
lines1 <- str_extract_all(mystring, "\\w{1,}\\s+[|]\\d+[.]\\d.+\\|")
lines1
lines1 <- str_extract_all(mystring, "[[:alnum:]_]+.+[|]\\d+[.]\\d.+\\|")
lines1
lines1 <- str_extract_all(mystring, "\\w+.+[|]\\d+[.]\\d.+\\|")
lines1
firstlines <- lapply(lines1, function (x){
x <- str_replace_all(x, "[|][A-Z]\\s{1,}", "|")
x <- str_replace_all(x, "\\s{2,}" , "")
x<- str_replace_all(x, "[|]{2}" , "|0|")
str_replace_all(x, "[|]{2}" , "|0|")
})
firstlines
names <- c()
points <- c()
averagePoints <- c()
for (row in unlist(firstlines)) {
ar<- unlist(str_split(row, fixed("|")))
print(row)
print("----")
names <- c(names, ar[1])
points <- c(points, ar[2])
averagePoints <- c(averagePoints, mean(as.integer(ar[3]),as.integer(ar[4]),as.integer(ar[5]),as.integer(ar[6]),as.integer(ar[7]),as.integer(ar[8]),as.integer(ar[9])))
}
names
points
averagePoints
statesData <- str_extract_all(mystring, ".+[A-Z]{2}\\s{1}[|]")
lines2
states = c()
for (state in unlist(statesData)) {
state <- str_replace_all(state, "\\s+" , "")
state <- str_replace_all(state, "[|]" , "")
states <- c(states, state)
}
states
length(states)
preRating = c()
prepostData <- str_extract_all(mystring, "[0-9,A-Z]+\\s*->\\s?[0-9,A-Z]+")
prepostData
for (prepost in unlist(prepostData)) {
prepost <- str_replace_all(prepost, "\\s?->" , "|")
ar<- unlist(str_split(prepost, fixed("|")))
preRating <- c(preRating,ar[1])
}
preRating
length(preRating)
length(points)
players.data <- data.frame(names=names,points=points, averagePoints=averagePoints, state=states ,preRating=preRating  )
View(players.data)
preRating = c()
prepostData <- str_extract_all(mystring, "[0-9,A-Z]+\\s*->\\s?[0-9,A-Z]+")
prepostData
for (prepost in unlist(prepostData)) {
prepost <- str_replace_all(prepost, "\\s?->" , "|")
ar<- unlist(str_split(prepost, fixed("|")))
preRating <- c(preRating,ar[1])
}
preRating
length(preRating)
length(points)
players.data <- data.frame(names=names,points=points, averagePoints=averagePoints, state=states ,preRating=preRating  )
View(players.data)
names
firstlines
lines1
for (row in unlist(firstlines)) {
ar<- unlist(str_split(row, fixed("|")))
print(row)
print("----")
names <- c(names, ar[2])
points <- c(points, ar[3])
averagePoints <- c(averagePoints, mean(as.integer(ar[4]),as.integer(ar[5]),as.integer(ar[6]),as.integer(ar[7]),as.integer(ar[8]),as.integer(ar[9]),as.integer(ar[10])))
}
names
points
averagePoints
statesData <- str_extract_all(mystring, ".+[A-Z]{2}\\s{1}[|]")
lines2
states = c()
for (state in unlist(statesData)) {
state <- str_replace_all(state, "\\s+" , "")
state <- str_replace_all(state, "[|]" , "")
states <- c(states, state)
}
states
length(states)
preRating = c()
prepostData <- str_extract_all(mystring, "[0-9,A-Z]+\\s*->\\s?[0-9,A-Z]+")
prepostData
for (prepost in unlist(prepostData)) {
prepost <- str_replace_all(prepost, "\\s?->" , "|")
ar<- unlist(str_split(prepost, fixed("|")))
preRating <- c(preRating,ar[1])
}
preRating
length(preRating)
length(points)
names
players.data <- data.frame(names=names,points=points, averagePoints=averagePoints, state=states ,preRating=preRating  )
View(prepostData)
View(players.data)
names
names <- c()
points <- c()
averagePoints <- c()
for (row in unlist(firstlines)) {
ar<- unlist(str_split(row, fixed("|")))
print(row)
print("----")
names <- c(names, ar[2])
points <- c(points, ar[3])
averagePoints <- c(averagePoints, mean(as.integer(ar[4]),as.integer(ar[5]),as.integer(ar[6]),as.integer(ar[7]),as.integer(ar[8]),as.integer(ar[9]),as.integer(ar[10])))
}
names
statesData <- str_extract_all(mystring, ".+[A-Z]{2}\\s{1}[|]")
lines2
states = c()
for (state in unlist(statesData)) {
state <- str_replace_all(state, "\\s+" , "")
state <- str_replace_all(state, "[|]" , "")
states <- c(states, state)
}
states
length(states)
preRating = c()
prepostData <- str_extract_all(mystring, "[0-9,A-Z]+\\s*->\\s?[0-9,A-Z]+")
prepostData
for (prepost in unlist(prepostData)) {
prepost <- str_replace_all(prepost, "\\s?->" , "|")
ar<- unlist(str_split(prepost, fixed("|")))
preRating <- c(preRating,ar[1])
}
preRating
length(preRating)
length(points)
names
players.data <- data.frame(names=names,points=points, averagePoints=averagePoints, state=states ,preRating=preRating  )
View(players.data)
head(players.data)
players.data
print(players.data)
knitr::opts_chunk$set(echo = TRUE)
install.packages("readr") # you only need to do this one time on your system
library(readr)
mystring <- read_file("tournamentinfo.txt")
mystring
head(mystring)
# Extract the line using regex
#names <- str_extract_all(mystring, "[[:alpha:]]+ [[:alpha:]]+\\s+[|]\\d+[.]\\d+\\s+[|].+\\|")
#names
#extract the 1st Line using regex
lines1 <- str_extract_all(mystring, "[[:alpha:]]+ [[:alpha:]]+\\s+[|]\\d+[.]\\d.+\\|")
lines1
lines1 <- str_extract_all(mystring, "\\w+.+[|]\\d+[.]\\d.+\\|")
lines1
firstlines <- lapply(lines1, function (x){
x <- str_replace_all(x, "[|][A-Z]\\s{1,}", "|")
x <- str_replace_all(x, "\\s{2,}" , "")
x<- str_replace_all(x, "[|]{2}" , "|0|")
str_replace_all(x, "[|]{2}" , "|0|")
})
firstlines
names <- c()
points <- c()
averagePoints <- c()
for (row in unlist(firstlines)) {
ar<- unlist(str_split(row, fixed("|")))
print(row)
print("----")
names <- c(names, ar[2])
points <- c(points, ar[3])
averagePoints <- c(averagePoints, mean(as.integer(ar[4]),as.integer(ar[5]),as.integer(ar[6]),as.integer(ar[7]),as.integer(ar[8]),as.integer(ar[9]),as.integer(ar[10])))
}
names
points
averagePoints
#================
statesData <- str_extract_all(mystring, ".+[A-Z]{2}\\s{1}[|]")
lines2
states = c()
for (state in unlist(statesData)) {
state <- str_replace_all(state, "\\s+" , "")
state <- str_replace_all(state, "[|]" , "")
states <- c(states, state)
}
states
length(states)
#============
#prepostData
preRating = c()
prepostData <- str_extract_all(mystring, "[0-9,A-Z]+\\s*->\\s?[0-9,A-Z]+")
prepostData
for (prepost in unlist(prepostData)) {
prepost <- str_replace_all(prepost, "\\s?->" , "|")
ar<- unlist(str_split(prepost, fixed("|")))
preRating <- c(preRating,ar[1])
}
preRating
length(preRating)
length(points)
names
players.data <- data.frame(names=names,points=points, averagePoints=averagePoints, state=states ,preRating=preRating  )
head(players.data)
install.packages("readr")
#install.packages("readr") # you only need to do this one time on your system
library(readr)
mystring <- read_file("tournamentinfo.txt")
mystring
head(mystring)
# Extract the line using regex
#names <- str_extract_all(mystring, "[[:alpha:]]+ [[:alpha:]]+\\s+[|]\\d+[.]\\d+\\s+[|].+\\|")
#names
#extract the 1st Line using regex
lines1 <- str_extract_all(mystring, "[[:alpha:]]+ [[:alpha:]]+\\s+[|]\\d+[.]\\d.+\\|")
lines1
lines1 <- str_extract_all(mystring, "\\w+.+[|]\\d+[.]\\d.+\\|")
lines1
firstlines <- lapply(lines1, function (x){
x <- str_replace_all(x, "[|][A-Z]\\s{1,}", "|")
x <- str_replace_all(x, "\\s{2,}" , "")
x<- str_replace_all(x, "[|]{2}" , "|0|")
str_replace_all(x, "[|]{2}" , "|0|")
})
firstlines
names <- c()
points <- c()
averagePoints <- c()
for (row in unlist(firstlines)) {
ar<- unlist(str_split(row, fixed("|")))
print(row)
print("----")
names <- c(names, ar[2])
points <- c(points, ar[3])
averagePoints <- c(averagePoints, mean(as.integer(ar[4]),as.integer(ar[5]),as.integer(ar[6]),as.integer(ar[7]),as.integer(ar[8]),as.integer(ar[9]),as.integer(ar[10])))
}
names
points
averagePoints
#================
statesData <- str_extract_all(mystring, ".+[A-Z]{2}\\s{1}[|]")
lines2
states = c()
for (state in unlist(statesData)) {
state <- str_replace_all(state, "\\s+" , "")
state <- str_replace_all(state, "[|]" , "")
states <- c(states, state)
}
states
length(states)
#============
#prepostData
preRating = c()
prepostData <- str_extract_all(mystring, "[0-9,A-Z]+\\s*->\\s?[0-9,A-Z]+")
prepostData
for (prepost in unlist(prepostData)) {
prepost <- str_replace_all(prepost, "\\s?->" , "|")
ar<- unlist(str_split(prepost, fixed("|")))
preRating <- c(preRating,ar[1])
}
preRating
length(preRating)
length(points)
names
players.data <- data.frame(names=names,points=points, averagePoints=averagePoints, state=states ,preRating=preRating  )
head(players.data)
#install.packages("readr") # you only need to do this one time on your system
library(readr)
library(stringr)
mystring <- read_file("tournamentinfo.txt")
mystring
head(mystring)
#extract the 1st Line using regex
lines1 <- str_extract_all(mystring, "\\w+.+[|]\\d+[.]\\d.+\\|")
lines1
firstlines <- lapply(lines1, function (x){
x <- str_replace_all(x, "[|][A-Z]\\s{1,}", "|")
x <- str_replace_all(x, "\\s{2,}" , "")
x<- str_replace_all(x, "[|]{2}" , "|0|")
str_replace_all(x, "[|]{2}" , "|0|")
})
firstlines
names <- c()
points <- c()
averagePoints <- c()
for (row in unlist(firstlines)) {
ar<- unlist(str_split(row, fixed("|")))
print(row)
print("----")
names <- c(names, ar[2])
points <- c(points, ar[3])
averagePoints <- c(averagePoints, mean(as.integer(ar[4]),as.integer(ar[5]),as.integer(ar[6]),as.integer(ar[7]),as.integer(ar[8]),as.integer(ar[9]),as.integer(ar[10])))
}
names
points
averagePoints
#================
statesData <- str_extract_all(mystring, ".+[A-Z]{2}\\s{1}[|]")
lines2
states = c()
for (state in unlist(statesData)) {
state <- str_replace_all(state, "\\s+" , "")
state <- str_replace_all(state, "[|]" , "")
states <- c(states, state)
}
states
length(states)
#============
#prepostData
preRating = c()
prepostData <- str_extract_all(mystring, "[0-9,A-Z]+\\s*->\\s?[0-9,A-Z]+")
prepostData
for (prepost in unlist(prepostData)) {
prepost <- str_replace_all(prepost, "\\s?->" , "|")
ar<- unlist(str_split(prepost, fixed("|")))
preRating <- c(preRating,ar[1])
}
preRating
length(preRating)
length(points)
names
players.data <- data.frame(names=names,points=points, averagePoints=averagePoints, state=states ,preRating=preRating  )
head(players.data)
