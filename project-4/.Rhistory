begin_date = "20171001",
end_date = '20181003' ))
library(XML)
library(RCurl)  ## required for GetURL method
library(bitops)
url <- GET("https://api.nytimes.com/svc/search/v2/articlesearch.json?",
query = list(
api_key = "35fe36fbf80e4f078f712490a23490ae",
'q': "artificial intelligence" ,
begin_date = "20171001",
end_date = '20181003' ))
library(XML)
library(RCurl)  ## required for GetURL method
library(bitops)
url <- get("https://api.nytimes.com/svc/search/v2/articlesearch.json?",
query = list(
api_key = "35fe36fbf80e4f078f712490a23490ae",
'q': "artificial intelligence" ,
begin_date = "20171001",
end_date = '20181003' ))
library(XML)
library(RCurl)  ## required for GetURL method
url <- getURL("https://api.nytimes.com/svc/search/v2/articlesearch.json?",
query = list(
api_key = "35fe36fbf80e4f078f712490a23490ae",
'q': "artificial intelligence" ,
begin_date = "20171001",
end_date = '20181003' ))
library(XML)
library(RCurl)  ## required for GetURL method
url <- getURL("https://api.nytimes.com/svc/search/v2/articlesearch.json?",
query = list(
api_key = "35fe36fbf80e4f078f712490a23490ae",
q: "artificial intelligence" ,
begin_date = "20171001",
end_date = '20181003' ))
library(XML)
library(RCurl)  ## required for GetURL method
url <- getURL("https://api.nytimes.com/svc/search/v2/articlesearch.json?api_key="35fe36fbf80e4f078f712490a23490ae"&q="artificial intelligence"&begin_date = "20171001"&end_date = '20181003' ))
library(XML)
library(RCurl)  ## required for GetURL method
url <- getURL('https://api.nytimes.com/svc/search/v2/articlesearch.json?api_key="35fe36fbf80e4f078f712490a23490ae"&q="artificial intelligence"&begin_date = "20171001"&end_date="20181003"')
nytimes_DF <- fromJSON(url)
library(XML)
library(RCurl)  ## required for GetURL method
url <- getURL('https://api.nytimes.com/svc/search/v2/articlesearch.json?api_key=35fe36fbf80e4f078f712490a23490ae&q=%22artificial%20intelligence%22&begin_date=20171001&end_date=20181003')
nytimes_DF <- fromJSON(url)
library(XML)
library(RCurl)  ## required for GetURL method
url <- getURL("https://api.nytimes.com/svc/search/v2/articlesearch.json?api_key=35fe36fbf80e4f078f712490a23490ae&q=%22artificial%20intelligence%22&begin_date=20171001&end_date=20181003")
nytimes_DF <- fromJSON(url)
library(XML)
nytimes_DF <- fromJSON(url)
library(jsonlite)
nytimes_DF <- fromJSON(url)
View(nytimes_DF)
nytimes_DF <- fromJSON(url)  %>% data.frame()
library(XML)
library(jsonlite)
library(RCurl)  ## required for GetURL method
url <- getURL("https://api.nytimes.com/svc/search/v2/articlesearch.json?api_key=35fe36fbf80e4f078f712490a23490ae&q=%22artificial%20intelligence%22&begin_date=20171001&end_date=20181003&all_results=TRUE")
nytimes_DF <- fromJSON(url)  %>% data.frame()
nytimes_DF
library(XML)
library(jsonlite)
library(RCurl)  ## required for GetURL method
url <- getURL("https://api.nytimes.com/svc/search/v2/articlesearch.json?api_key=35fe36fbf80e4f078f712490a23490ae&q=%22artificial%20intelligence%22&begin_date=20171001&end_date=20181003&all_results=yes")
nytimes_DF <- fromJSON(url)  %>% data.frame()
nytimes_DF
library(XML)
library(jsonlite)
library(RCurl)  ## required for GetURL method
url <- getURL("https://api.nytimes.com/svc/search/v2/articlesearch.json?api_key=35fe36fbf80e4f078f712490a23490ae&q=%22artificial%20intelligence%22&begin_date=20171001&end_date=20181003&all_results=true")
nytimes_DF <- fromJSON(url)  %>% data.frame()
nytimes_DF
library(XML)
library(jsonlite)
library(RCurl)  ## required for GetURL method
url <- getURL("https://api.nytimes.com/svc/search/v2/articlesearch.json?api_key=35fe36fbf80e4f078f712490a23490ae&q=%22artificial%20intelligence%22&begin_date=20171001&end_date=20181003&all_results")
nytimes_DF <- fromJSON(url)  %>% data.frame()
nytimes_DF
nytimes_DF <- fromJSON(url)
nytimes_DF
library(XML)
library(jsonlite)
library(RCurl)  ## required for GetURL method
url <- getURL("https://api.nytimes.com/svc/search/v2/articlesearch.json?api_key=35fe36fbf80e4f078f712490a23490ae&q=%22artificial%20intelligence%22&begin_date=20171001&end_date=20181003&all_results")
nytimes_DF <- fromJSON(url)
nytimes_DF
# %>% data.frame()
library(XML)
library(jsonlite)
library(RCurl)  ## required for GetURL method
url <- getURL("https://api.nytimes.com/svc/search/v2/articlesearch.json?api_key=35fe36fbf80e4f078f712490a23490ae&q=%22artificial%20intelligence%22&begin_date=20171001&end_date=20181003&all_results")
nytimes_DF <- fromJSON(url)
nytimes_DF
# %>% data.frame()
library(XML)
library(jsonlite)
library(RCurl)  ## required for GetURL method
url <- getURL("https://api.nytimes.com/svc/search/v2/articlesearch.json?api_key=35fe36fbf80e4f078f712490a23490ae&q=%22artificial%20intelligence%22&begin_date=20171001&end_date=20181003&all_results")
nytimes_DF <- fromJSON(url)
print("test")
nytimes_DF
# %>% data.frame()
nrow(x$data)
nytimes_DF[response]$meta
nytimes_DF[2]
nytimes_DF[3]
nytimes_DF[4]
nytimes_DF[1]
nytimes_DF[5]
nytimes_DF[3]
library(XML)
library(jsonlite)
library(RCurl)  ## required for GetURL method
url <- getURL("https://api.nytimes.com/svc/search/v2/articlesearch.json?api_key=35fe36fbf80e4f078f712490a23490ae&q=%22artificial%20intelligence%22&begin_date=20171001&end_date=20181003&all_results")
nytimes_DF <- fromJSON(url)
totalhits <- nytimes_DF[3]$response$meta$hits
data_GetCallDF <- nytimes_DF nytimes_DF[3]$response$docs
library(XML)
library(jsonlite)
library(RCurl)  ## required for GetURL method
url <- getURL("https://api.nytimes.com/svc/search/v2/articlesearch.json?api_key=35fe36fbf80e4f078f712490a23490ae&q=%22artificial%20intelligence%22&begin_date=20171001&end_date=20181003&all_results")
nytimes_DF <- fromJSON(url)
totalhits <- nytimes_DF[3]$response$meta$hits
data_GetCallDF <- nytimes_DF  %>% data.frame()
data_GetCallDF
# %>% data.frame()
library(XML)
library(jsonlite)
library(RCurl)  ## required for GetURL method
url <- getURL("https://api.nytimes.com/svc/search/v2/articlesearch.json?api_key=35fe36fbf80e4f078f712490a23490ae&q=%22artificial%20intelligence%22&begin_date=20171001&end_date=20181003&all_results")
nytimes_DF <- fromJSON(url)
totalhits <- nytimes_DF[3]$response$meta$hits
data_GetCallDF <- nytimes_DF$response$docs  %>% data.frame()
data_GetCallDF
# %>% data.frame()
View(data_GetCallDF)
library(XML)
library(jsonlite)
library(RCurl)  ## required for GetURL method
url <- getURL("https://api.nytimes.com/svc/search/v2/articlesearch.json?api_key=35fe36fbf80e4f078f712490a23490ae&q=%22artificial%20intelligence%22&begin_date=20171001&end_date=20181003&all_results")
nytimes_DF <- fromJSON(url)
totalhits <- nytimes_DF[3]$response$meta$hits
data_GetCallDF <- nytimes_DF$response$docs$ %>%  select("web_url" ) data.frame()
library(XML)
library(jsonlite)
library(RCurl)  ## required for GetURL method
url <- getURL("https://api.nytimes.com/svc/search/v2/articlesearch.json?api_key=35fe36fbf80e4f078f712490a23490ae&q=%22artificial%20intelligence%22&begin_date=20171001&end_date=20181003&all_results")
nytimes_DF <- fromJSON(url)
totalhits <- nytimes_DF[3]$response$meta$hits
data_GetCallDF <- nytimes_DF$response$docs %>%  select("web_url" )%>% data.frame()
data_GetCallDF
# %>% data.frame()
View(data_GetCallDF)
library(XML)
library(jsonlite)
library(RCurl)  ## required for GetURL method
url <- getURL("https://api.nytimes.com/svc/search/v2/articlesearch.json?api_key=35fe36fbf80e4f078f712490a23490ae&q=%22artificial%20intelligence%22&begin_date=20171001&end_date=20181003&all_results")
nytimes_DF <- fromJSON(url)
totalhits <- nytimes_DF[3]$response$meta$hits
data_GetCallDF <- nytimes_DF$response$docs %>%  select("web_url", "source", "pub_date") %>% data.frame()
data_GetCallDF
# %>% data.frame()
library(XML)
library(jsonlite)
library(RCurl)  ## required for GetURL method
url <- getURL("https://api.nytimes.com/svc/search/v2/articlesearch.json?api_key=35fe36fbf80e4f078f712490a23490ae&q=%22artificial%20intelligence%22&begin_date=20171001&end_date=20181003&all_results")
nytimes_DF <- fromJSON(url)
totalhits <- nytimes_DF[3]$response$meta$hits
data_GetCallDF <- nytimes_DF$response$docs$ %>%  select("web_url", "source", "pub_date", "document_type", "score") %>% data.frame()
library(XML)
library(jsonlite)
library(RCurl)  ## required for GetURL method
url <- getURL("https://api.nytimes.com/svc/search/v2/articlesearch.json?api_key=35fe36fbf80e4f078f712490a23490ae&q=%22artificial%20intelligence%22&begin_date=20171001&end_date=20181003&all_results")
nytimes_DF <- fromJSON(url)
totalhits <- nytimes_DF[3]$response$meta$hits
data_GetCallDF <- nytimes_DF$response$docs %>%  select("web_url", "source", "pub_date", "document_type", "score") %>% data.frame()
data_GetCallDF
# %>% data.frame()
library(XML)
library(jsonlite)
library(kableExtra)
library(knitr)
library(RCurl)  ## required for GetURL method
url <- getURL("https://api.nytimes.com/svc/search/v2/articlesearch.json?api_key=35fe36fbf80e4f078f712490a23490ae&q=%22artificial%20intelligence%22&begin_date=20171001&end_date=20181003&all_results")
nytimes_DF <- fromJSON(url)
totalhits <- nytimes_DF[3]$response$meta$hits
data_GetCallDF <- nytimes_DF$response$docs %>%  select("web_url", "source", "pub_date", "document_type", "score") %>% data.frame()
data_GetCallDF %>%
kable() %>%
kable_styling()
# %>% data.frame()
filterData %>%
kable() %>%
kable_styling()
nrow(x$data)
totalhits <- nytimes_DF[3]$response$meta$hits
totalhits <- nytimes_DF[3]$response$meta$hits
totalhits <- nytimes_DF[3]$response$meta$hits
totalhits
startLab('Lab5')
library(DATA606)
startLab('Lab5')
setwd("~/CunyMSDS/606-Statistical Analsyis/assignments")
startLab('Lab5')
load("more/nc.RData")
dim(nc)
boxplot(nc$habit ~ nc$weight)
boxplot(nc$weight ~ nc$habit)
by(nc$weight, nc$habit, mean)
by(nc$weight, nc$habit, length)
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical",
order = c("smoker","nonsmoker"))
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weeks, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weeks, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical", conflevel = .90)
head(nc$gained)
head(nc$gained)
inference(y = nc$gained, x = nc$mature, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical")
head(nc$mature)
inference(y = nc$gained, x = nc$mature, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$gained, x = nc$mature, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical")
by(nc$mage, nc$mature , range)
head(nc)
head(nc)
head(nc)
head(nc)
head(nc)
head(nc)
head(nc)
head(nc)
head(nc)
head(nc)
head(nc)
head(nc)
inference(y = nc$habit, x = nc$lowbirthweight, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$lowbirthweight, x = nc$habit, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$lowbirthweight, x = nc$habit, est = "proportion", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
head(nc$lowbirthweight)
inference(y = nc$visits, x = nc$habit, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$visits, x = nc$habit, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical")
setwd("~/CunyMSDS/606-Statistical Analsyis/assignments/chapter5")
knitr::opts_chunk$set(echo = TRUE)
qt(.9, 24)
pt(1.31, 24)
sample_mean <- (65 + 77)/2
qt(.9, 24)
pt(1.31, 24)
sample_mean <- (65 + 77)/2
sample_mean
qt(.9, 24)
pt(1.31, 24)
sample_mean <- (65 + 77)/2
sample_mean
margin_error <- x2 - sample_mean
x1 <- 65
x2 <-77
sample_mean <- (x1 + x2)/2
sample_mean
margin_error <- x2 - sample_mean
margin_error
qt(.9, 24)
pt(1.31, 24)
x1 <- 65
x2 <-77
n<- 25
sample_mean <- (x1 + x2)/2
sample_mean
margin_error <- x2 - sample_mean
margin_error
t* <- qt(0.9, 24)
x1 <- 65
x2 <-77
n<- 25
sample_mean <- (x1 + x2)/2
sample_mean
margin_error <- x2 - sample_mean
margin_error
t_stat <- qt(0.9, 24)
t_stat
SE <- 6/t_stat
SD <- SE * sqrt(24)
x1 <- 65
x2 <-77
n<- 25
sample_mean <- (x1 + x2)/2
sample_mean
margin_error <- x2 - sample_mean
margin_error
t_stat <- qt(0.9, 24)
t_stat
SE <- margin_error/t_stat
SD <- SE * sqrt(24)
x1 <- 65
x2 <-77
n<- 25
sample_mean <- (x1 + x2)/2
sample_mean
margin_error <- x2 - sample_mean
margin_error
t_stat <- qt(0.9, 24)
t_stat
SE <- margin_error/t_stat
SD <- SE * sqrt(24)
SD
x1 <- 65
x2 <-77
n<- 25
sample_mean <- (x1 + x2)/2
sample_mean
margin_error <- x2 - sample_mean
margin_error
t_stat <- 2 * qt(0.10, 24)
t_stat
SE <- margin_error/t_stat
SD <- SE * sqrt(24)
SD
x1 <- 65
x2 <-77
n<- 25
sample_mean <- (x1 + x2)/2
sample_mean
margin_error <- x2 - sample_mean
margin_error
t_stat <-qt(0.90, 24)
t_stat
SE <- margin_error/t_stat
SD <- SE * sqrt(24)
SD
x1 <- 65
x2 <-77
n<- 25
sample_mean <- (x1 + x2)/2
sample_mean
margin_error <- x2 - sample_mean
margin_error
t_stat <-qt(0.95, 24)
t_stat
SE <- margin_error/t_stat
SD <- SE * sqrt(24)
SD
x1 <- 65
x2 <-77
n<- 25
sample_mean <- (x1 + x2)/2
sample_mean
margin_error <- x2 - sample_mean
margin_error
t_stat <-qt(0.90, 24)
t_stat
SE <- margin_error/t_stat
SD <- (margin_error/t_stat) * sqrt(24)
SD
t_stat <-qt(0.90, 24)
t_stat
SD <- (margin_error/t_stat) * sqrt(24)
SD
t_stat <-qt(0.90, 24)
t_stat
SD <- (margin_error/t_stat) * sqrt(24)
SD
t_stat <-qt(0.90, 24)
t_stat
margin_error/t_stat
SD <- (margin_error/t_stat) * sqrt(24)
SD
germanCreditDF <- read.delim("C:/Users/Charls/Documents/CunyMSDS/606-Statistical Analsyis/final-project/data/german.data.txt", sep = " ", header = F)
column_headers <-  c("checkingAcc", "Duration", "Credit_Hist", "Purpose" ,"Credit_Amt" , "SavingsAcc" , "Employment_Stat", "Installment_rate", "personal_stat" , "deptor_stat" ,"residence_in_years" ,"Property" , "age","other_instalment_plans" , "Housing" , "no_of_credits" ,"Job_type" , "no_liable" , "Telephone" ,
"foreign_worker", "Customer_class" )
colnames(germanCreditDF) <- column_headers
hist(germanCreditDF$Duration)
germanCreditDF$class <- sapply(germanCreditDF$Customer_class, function(x){
switch(as.character(x), "1" = "Good", "2" = "Bad")
})
library(ggplot2)
ggplot(germanCreditDF, aes(x=class, y=Duration)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
inference(y = germanCreditDF$Duration, x = germanCreditDF$class, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
# Quantitive variable comparison(using Boxplots)
hist(germanCreditDF$Credit_Amt)
# Set a unique color with fill, colour, and alpha
ggplot(germanCreditDF, aes(x=class, y=Credit_Amt)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
inference(y = germanCreditDF$Credit_Amt, x = germanCreditDF$class, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
# Quantitive variable comparison(using Boxplots)
hist(germanCreditDF$Credit_Amt)
# Set a unique color with fill, colour, and alpha
ggplot(germanCreditDF, aes(x=class, y=Credit_Amt)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
inference(y = germanCreditDF$Credit_Amt, x = germanCreditDF$class, est = "median", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
# Quantitive variable comparison(using Boxplots)
hist(germanCreditDF$Credit_Amt)
# Set a unique color with fill, colour, and alpha
ggplot(germanCreditDF, aes(x=class, y=Credit_Amt)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
inference(y = germanCreditDF$Credit_Amt, x = germanCreditDF$class, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
hist(germanCreditDF$Duration)
germanCreditDF$class <- sapply(germanCreditDF$Customer_class, function(x){
switch(as.character(x), "1" = "Good", "2" = "Bad")
})
library(ggplot2)
ggplot(germanCreditDF, aes(x=class, y=Duration)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
inference(y = germanCreditDF$Duration, x = germanCreditDF$class, est = "median", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
hist(germanCreditDF$Duration)
germanCreditDF$class <- sapply(germanCreditDF$Customer_class, function(x){
switch(as.character(x), "1" = "Good", "2" = "Bad")
})
library(ggplot2)
ggplot(germanCreditDF, aes(x=class, y=Duration)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
inference(y = germanCreditDF$Duration, x = germanCreditDF$class, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
# Quantitive variable comparison(using Boxplots)
hist(germanCreditDF$Credit_Amt)
# Set a unique color with fill, colour, and alpha
ggplot(germanCreditDF, aes(x=class, y=Credit_Amt)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
inference(y = germanCreditDF$Credit_Amt, x = germanCreditDF$class, est = "median", type = "ht", null = 0,
alternative = "twosided", method = "simulation")
hist(germanCreditDF$Duration)
germanCreditDF$class <- sapply(germanCreditDF$Customer_class, function(x){
switch(as.character(x), "1" = "Good", "2" = "Bad")
})
library(ggplot2)
ggplot(germanCreditDF, aes(x=class, y=Duration)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
inference(y = germanCreditDF$Duration, x = germanCreditDF$class, est = "median", type = "ht", null = 0,
alternative = "simulation", method = "theoretical")
hist(germanCreditDF$Duration)
germanCreditDF$class <- sapply(germanCreditDF$Customer_class, function(x){
switch(as.character(x), "1" = "Good", "2" = "Bad")
})
library(ggplot2)
ggplot(germanCreditDF, aes(x=class, y=Duration)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
inference(y = germanCreditDF$Duration, x = germanCreditDF$class, est = "median", type = "ht", null = 0,
alternative = "twosided", method = "simulation")
hist(germanCreditDF$no_of_credits)
ggplot(germanCreditDF, aes(x=class, y=no_of_credits)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
inference(y = germanCreditDF$no_of_credits, x = germanCreditDF$class, est = "median", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
hist(germanCreditDF$no_of_credits)
ggplot(germanCreditDF, aes(x=class, y=no_of_credits)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
inference(y = germanCreditDF$no_of_credits, x = germanCreditDF$class, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = germanCreditDF$Duration, x = germanCreditDF$class, est = "median", type = "ht", null = 0,
alternative = "twosided", method = "simulation")
# Quantitive variable comparison(using Boxplots)
hist(germanCreditDF$Credit_Amt)
# Set a unique color with fill, colour, and alpha
ggplot(germanCreditDF, aes(x=class, y=Credit_Amt)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
inference(y = germanCreditDF$Credit_Amt, x = germanCreditDF$class, est = "median", type = "ht", null = 0,
alternative = "twosided", method = "simulation")
hist(germanCreditDF$no_of_credits)
ggplot(germanCreditDF, aes(x=class, y=no_of_credits)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
inference(y = germanCreditDF$no_of_credits, x = germanCreditDF$class, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
library('inference')
install.packages('inference')
library(inference)
source(http://www.openintro.org/stat/slides/inference.R)
source('http://www.openintro.org/stat/slides/inference.R')
inference(y = germanCreditDF$Duration, x = germanCreditDF$class, est = "median", type = "ht", null = 0,
alternative = "twosided", method = "simulation")
hist(germanCreditDF$age)
ggplot(germanCreditDF, aes(x=class, y=age)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
inference(y = germanCreditDF$age, x = germanCreditDF$class, est = "median", type = "ht", null = 0,
alternative = "twosided", method = "simulation")
startLab('Lab5')
setwd("~/CunyMSDS/606-Statistical Analsyis/assignments/chapter6")
startLab('Lab6')
setwd("~/CunyMSDS/607-Data Acquiction/project-4")
knitr::opts_chunk$set(echo = TRUE)
text <-readLines("C:\Users\Charls\Documents\CunyMSDS\607-Data Acquiction\project-4\dataset\spam\00001.7848dde101aa985090474a91ec93fcf0")
setwd("~/CunyMSDS/607-Data Acquiction/project-4")
text <-readLines("~dataset\spam\00001.7848dde101aa985090474a91ec93fcf0")
text <-readLines("~dataset/spam/00001.7848dde101aa985090474a91ec93fcf0")
text <-readLines("~dataset\\spam\\00001.7848dde101aa985090474a91ec93fcf0")
text <-readLines("~dataset\spam\00001.7848dde101aa985090474a91ec93fcf0")
text <-readLines("~dataset\\spam\00001.7848dde101aa985090474a91ec93fcf0")
text <-readLines("~dataset\\spam\00001.7848dde101aa985090474a91ec93fcf0")
text <-readLines("~dataset\\spam\\00001.7848dde101aa985090474a91ec93fcf0")
text <-readLines('~dataset\\spam\00001.7848dde101aa985090474a91ec93fcf0')
